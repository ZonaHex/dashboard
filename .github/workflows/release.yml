on:
  push:
    tags:
      - 'v*.*.*'
  schedule:
    # At 00:00 on Monday.
    - cron: '0 0 * * 1'
  workflow_dispatch:

name: Release

env:
  SCHEDULED_BUILD_VERSION_PREFIX: v0.2.0

  SCHEDULED_PERIOD: nightly

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install

      - name: Run build
        run: npm run build:docker

      - name: Calculate checksum and rename binary
        shell: bash
        run: |
          cd dist
          tar -czvf build.tar.gz *
          echo $(shasum -a 256 build.tar.gz) > sha256.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build.tar.gz
          path: build.tar.gz

      - name: Upload checksum of artifacts
        uses: actions/upload-artifact@v3
        with:
          name: sha256.txt
          path: sha256.txt

  # docker:
  #   name: Build docker image
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout sources
  #       uses: actions/checkout@v3

  # - name: Login to Dockerhub
  #   uses: docker/login-action@v2
  #   with:
  #     username: ${{ secrets.DOCKERHUB_USERNAME }}
  #     password: ${{ secrets.DOCKERHUB_TOKEN }}

  # - name: Configure scheduled build image tag # the tag would be ${SCHEDULED_BUILD_VERSION_PREFIX}-YYYYMMDD-${SCHEDULED_PERIOD}
  #   shell: bash
  #   if: github.event_name == 'schedule'
  #   run: |
  #     buildTime=`date "+%Y%m%d"`
  #     SCHEDULED_BUILD_VERSION=${{ env.SCHEDULED_BUILD_VERSION_PREFIX }}-$buildTime-${{ env.SCHEDULED_PERIOD }}
  #     echo "IMAGE_TAG=${SCHEDULED_BUILD_VERSION:1}" >> $GITHUB_ENV

  # - name: Configure tag # If the release tag is v0.1.0, then the image version tag will be 0.1.0.
  #   shell: bash
  #   if: github.event_name != 'schedule'
  #   run: |
  #     VERSION=${{ github.ref_name }}
  #     echo "IMAGE_TAG=${VERSION:1}" >> $GITHUB_ENV

  # - name: Set up QEMU
  #   uses: docker/setup-qemu-action@v2

  # - name: Set up buildx
  #   uses: docker/setup-buildx-action@v2

  # - name: Download arm64 binary
  #   id: download-arm64
  #   uses: actions/download-artifact@v3
  #   with:
  #     name: greptime-linux-arm64-pyo3
  #     path: arm64

  # - name: Unzip the arm64 artifacts
  #   id: unzip-arm64
  #   if: success() || steps.download-arm64.conclusion == 'success'
  #   run: |
  #     tar xvf arm64/greptime-linux-arm64-pyo3.tgz -C arm64/ && rm arm64/greptime-linux-arm64-pyo3.tgz
  #     cp -r arm64 docker/ci

  # - name: Build and push all
  #   uses: docker/build-push-action@v3
  #   if: success() || steps.unzip-arm64.conclusion == 'success' # Build and push all platform if unzip-arm64 succeeds
  #   with:
  #     context: ./docker/ci/
  #     file: ./docker/ci/Dockerfile
  #     push: true
  #     platforms: linux/amd64,linux/arm64
  #     tags: |
  #       greptime/greptimedb:latest
  #       greptime/greptimedb:${{ env.IMAGE_TAG }}

  # release:
  #   name: Release artifacts
  #   # Release artifacts only when all the artifacts are built successfully.
  #   needs: [build, docker]
  #   runs-on: ubuntu-latest
  #   if: github.repository == 'GreptimeTeam/greptimedb' && github.event_name != 'workflow_dispatch'
  #   steps:
  #     - name: Checkout sources
  #       uses: actions/checkout@v3

  #     - name: Download artifacts
  #       uses: actions/download-artifact@v3

  #     - name: Configure scheduled build version # the version would be ${SCHEDULED_BUILD_VERSION_PREFIX}-${SCHEDULED_PERIOD}-YYYYMMDD, like v0.2.0-nigthly-20230313.
  #       shell: bash
  #       if: github.event_name == 'schedule'
  #       run: |
  #         buildTime=`date "+%Y%m%d"`
  #         SCHEDULED_BUILD_VERSION=${{ env.SCHEDULED_BUILD_VERSION_PREFIX }}-${{ env.SCHEDULED_PERIOD }}-$buildTime
  #         echo "SCHEDULED_BUILD_VERSION=${SCHEDULED_BUILD_VERSION}" >> $GITHUB_ENV

  #     - name: Create scheduled build git tag
  #       if: github.event_name == 'schedule'
  #       run: |
  #         git tag ${{ env.SCHEDULED_BUILD_VERSION }}

  #     - name: Publish scheduled release # configure the different release title and tags.
  #       uses: softprops/action-gh-release@v1
  #       if: github.event_name == 'schedule'
  #       with:
  #         name: 'Release ${{ env.SCHEDULED_BUILD_VERSION }}'
  #         tag_name: ${{ env.SCHEDULED_BUILD_VERSION }}
  #         generate_release_notes: true
  #         files: |
  #           **/greptime-*

  #     - name: Publish release
  #       uses: softprops/action-gh-release@v1
  #       if: github.event_name != 'schedule'
  #       with:
  #         name: 'Release ${{ github.ref_name }}'
  #         files: |
  #           **/greptime-*
